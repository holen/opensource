# 查看PHP-FPM在你的机器上的平均内存占用：
ps --no-headers -o "rss,cmd" -C php-fpm | awk '{ sum+=$1 } END { printf ("%d%s\n", sum/NR/1024,"M") }'

# 查看每个FPM的内存占用：
ps -ylC php-fpm --sort:rss

# 查看httpd进程使用了多少内存
ps aux | grep 'nginx' | awk '{print $6/1024 " MB";}'

# 查看php各pool线程占用的内存
ps aux | grep 'php-fpm' | awk '{print $6/1024 " "$13;}' | awk '{sum[$2] += $1} END {for(i in sum){print i, sum[i] "M"}}'

ps aux | grep 'php-fpm' | awk '{print $3" "$13;}' | awk '{sum[$2] += $1} END {for(i in sum){print i, sum[i]}}'

# 找出当前系统内存使用量较高的进程
ps -aux | sort -rnk 4 | head -20

# 找出当前系统CPU使用量较高的进程
ps -aux | sort -rnk 3 | head -20

# 查看程序占用内存与CPU情况
ps -A --sort -rss -o comm,pmem,pcpu | grep php-fpm | awk '{a+=$2;b+=$3} END {print $1, a, b}'

COMMAND         %MEM %CPU
mysqld           5.8 22.5
java             0.9  0.5
nginx            0.6  0.1
nginx            0.6  0.0
nginx            0.6  0.1
nginx            0.6  0.0
php-fpm          0.6  0.6
php-fpm          0.6  0.4
php-fpm          0.6  0.6
php-fpm          0.6  0.2

# 查看程序占用内存情况 (查看CPU的话，就把$2改为$3)
ps -A --sort -rss -o comm,pmem,pcpu | awk '{sum[$1] += $2} END {for(i in sum){print i, sum[i]}}' | sort -rnk 2 | head -n 20

COMMAND %MEM
php-fpm 74.9
mysqld 6
nginx 2.5

ps -eo size,pid,user,command --sort -size | awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=4 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }' | grep php-fpm 


1. ps -eo ppid,pid,user,stat,pcpu,comm,wchan:32
This prints a list of all processes where in the last column either a '-' is displayed when the process is running or the name of the kernel function in which the process is sleeping if the process is currently sleeping. This includes also processes which are interruptible. Processes that are in uninterruptible sleep can be determined via the fourth column which would then show a D.

2. echo w > /proc/sysrq-trigger
This command produces a report and a list of all processes in D state and a full kernel stack trace to /var/log/messages. This shows much more information than the first option described above.


# 计算进程真正占用的物理内存，使用 grep 查找 Pss 指标后，再用 awk 计算累加值
grep Pss /proc/[1-9]*/smaps | awk '{total+=$2}; END {printf "%d kB\n", total }'

