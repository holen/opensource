strace

	常用来跟踪进程执行时的系统调用和所接收的信号。 
	在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通 过系统调用访问硬件设备。
	strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。

	-c 统计每一系统调用的所执行的时间,次数和出错的次数等. 
	-d 输出strace关于标准错误的调试信息. 
	-f 跟踪由fork调用所产生的子进程. 
	-ff 如果提供-o filename,则所有进程的跟踪结果输出到相应的filename.pid中,pid是各进程的进程号. 
	-F 尝试跟踪vfork调用.在-f时,vfork不被跟踪. 
	-h 输出简要的帮助信息. 
	-i 输出系统调用的入口指针. 
	-q 禁止输出关于脱离的消息. 
	-r 打印出相对时间关于,,每一个系统调用. 
	-t 在输出中的每一行前加上时间信息. 
	-tt 在输出中的每一行前加上时间信息,微秒级. 
	-ttt 微秒级输出,以秒了表示时间. 
	-T 显示每一调用所耗的时间. 
	-v 输出所有的系统调用.一些调用关于环境变量,状态,输入输出等调用由于使用频繁,默认不输出. 
	-V 输出strace的版本信息. 
	-x 以十六进制形式输出非标准字符串 
	-xx 所有字符串以十六进制形式输出.
	-a column   设置返回值的输出位置.默认 为40. 
	-e expr   指定一个表达式,用来控制如何跟踪
	-o filename   将strace的输出写入文件filename 
	-p pid 跟踪指定的进程pid. 一般用于跟踪后台程序
	-s strsize 指定输出的字符串的最大长度.默认为32. 
	-u username  以username 的UID和GID执行被跟踪的命令

跟踪nginx, 看其启动时都访问了哪些文件

	strace -tt -T -f -e trace=file -o /data/log/strace.log -s 1024 2>&1 ./nginx

定位程序异常退出

	strace -ttf -T -p 10893 -o tmp -e trace=process 2>&1

程序启动加载文件

	strace -e open,acces ./sh 2>&1 | grep fileName

查选程序耗时

	strace -c -p 11084

链接服务器失败

	strace -e poll,select,connect,recvfrom,sendto nc www.baidu.com 80 


strace可以跟踪系统调用的执行情况，在程序发生问题后，可以用strace分析和跟踪问题。 使用方法：

    FreeBSD/MacOS下可以使用truss

strace -o /tmp/strace.log -f -p $PID

    -f 表示跟踪多线程和多进程，如果不加-f参数，无法抓取到子进程和子线程的运行情况
    -o 表示将结果输出到一个文件中
    -p $PID，指定跟踪的进程ID，通过ps aux可以看到
    -tt 打印系统调用发生的时间，精确到微妙
    -s 限定字符串打印的长度，如recvfrom系统调用收到的数据，默认只打印32字节
    -c 实时统计每个系统调用的耗时
    -T 打印每个系统调用的耗时


strace -cp $(pgrep -n nginx)
top
strace -T -ttp $(pgrep -n nginx) 2&>1 |grep -B 10 close > close.log
lsof | more
strace -cp $(pgrep -n php-fpm)
strace -T -ttp $(pgrep -n php-fpm) 2&>1 | grep -B 10 access > access.log
strace -T -ttp $(pgrep -n php-fpm) 2&>1 | grep -B 10 recvfrom > access.log
